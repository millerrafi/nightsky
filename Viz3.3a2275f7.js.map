{"version":3,"sources":["js/d3/horizon.js","js/three/Viz3.js"],"names":["range","makeHorison","radius","mesh","type","coordinates","concat","x","meridian","y","parallel","THREE","LineBasicMaterial","color","PALETTE","HORIZON","opacity","transparent","y0","y1","dy","x0","x1","dx","start","stop","step","i","v","Viz","index","canvas","document","getElementById","container","parentNode","BCR","getBoundingClientRect","WIDTH","width","HEIGHT","height","ASPECT","renderer","WebGLRenderer","antialias","camera","PerspectiveCamera","position","set","scene","Scene","background","Color","add","setSize","controls","OrbitControls","enabled","addEventListener","celestialSphere","Object3D","ground","Mesh","CircleGeometry","EARTH_DISTANCE","MeshBasicMaterial","renderOrder","rotation","Math","PI","underground","clone","material","blending","additiveBlending","sunMap","TextureLoader","load","images","sunMaterial","SpriteMaterial","map","depthWrite","sun","Sprite","scale","SUN_RADIUS","eclipticPlane","TorusGeometry","ECLIPTIC","side","DoubleSide","moon","SphereGeometry","MOON_RADIUS","moonOrbit","MOON","moonTilt","rotateOnWorldAxis","Vector3","normalize","DEG","ecliptic","EARTH_TILT","light","DirectionalLight","targetObject","target","graticule","constellations","equator","EQUATOR","horizon","northSouth","CylinderGeometry","eastWest","z","observer","starFieldOptions","maxSize","dot","additive","scalePoint","mag","exp","starField","then","stars11","stars","planets","forEach","p","_p","update","positions","hide","location","sunLong","Sun","longitude","moonLong","Moon","_long","_lat","latitude","sin","cos","min","apparentSize","visible","orbits","lat","long","Earth","rotationAngle","lookAt","rotateY","render","onResize","BCR1","aspect","updateProjectionMatrix"],"mappings":"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","file":"Viz3.3a2275f7.js","sourceRoot":"..\\src","sourcesContent":["// https://observablehq.com/@mbostock/geojson-in-three-js\r\nimport wireframe from './wireframe.js';\r\nimport { PALETTE } from '../constants.js';\r\nimport * as THREE from 'three';\r\n\r\nexport default function makeHorison(radius) {\r\n  const mesh = {\r\n    type: 'MultiLineString',\r\n    coordinates: [].concat(\r\n      Array.from(range(-180, 180, 90), x =>\r\n        x % 90 ? meridian(x, -60, 60) : meridian(x, 0, 90)\r\n      ),\r\n      Array.from(range(0, 90 + 1e-6, 90), y => parallel(y, -180, 180))\r\n    )\r\n  };\r\n\r\n  return wireframe(\r\n    mesh,\r\n    radius,\r\n    new THREE.LineBasicMaterial({\r\n      color: PALETTE.HORIZON,\r\n      opacity: 1,\r\n      transparent: true\r\n    })\r\n  );\r\n}\r\n\r\nfunction meridian(x, y0, y1, dy = 2.5) {\r\n  return Array.from(range(y0, y1 + 1e-6, dy), y => [x, y]);\r\n}\r\n\r\nfunction parallel(y, x0, x1, dx = 2.5) {\r\n  return Array.from(range(x0, x1 + 1e-6, dx), x => [x, y]);\r\n}\r\n\r\nfunction* range(start, stop, step) {\r\n  for (let i = 0, v = start; v < stop; v = start + ++i * step) {\r\n    yield v;\r\n  }\r\n}\r\n","import {\r\n  DEG,\r\n  EARTH_DISTANCE,\r\n  EARTH_TILT,\r\n  MOON_RADIUS,\r\n  SUN_RADIUS,\r\n  PALETTE\r\n} from '../constants.js';\r\nimport * as THREE from 'three';\r\nimport makeGraticule from '../d3/graticule.js';\r\nimport makeHorizon from '../d3/horizon.js';\r\nimport makeConstellationLines from './makeConstellationLines.js';\r\n// import makeStarField from '/js/three/starField.js';\r\nimport WorldMaterial from './WorldMaterial.js';\r\nimport makeStarField, { getStars11 } from './starField.js';\r\n\r\nimport images from '../images';\r\n\r\nexport default function Viz(index) {\r\n  const canvas = document.getElementById(`c${index}`);\r\n  const container = canvas.parentNode;\r\n  const BCR = container.getBoundingClientRect();\r\n\r\n  // Set the scene size.\r\n  const WIDTH = BCR.width;\r\n  const HEIGHT = BCR.height;\r\n\r\n  // coordsInput.\r\n\r\n  // Set some camera attributes.\r\n  const VIEW_ANGLE = 15;\r\n  const ASPECT = WIDTH / HEIGHT;\r\n  const NEAR = 0.1;\r\n  const FAR = 10000;\r\n\r\n  const renderer = new THREE.WebGLRenderer({\r\n    antialias: true,\r\n    canvas: canvas\r\n  });\r\n\r\n  const camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);\r\n  camera.position.set(200, 150, 200);\r\n  const scene = new THREE.Scene();\r\n  scene.background = new THREE.Color(0x111111);\r\n  scene.add(camera);\r\n  renderer.setSize(WIDTH, HEIGHT);\r\n\r\n  var controls = new THREE.OrbitControls(camera, container);\r\n  controls.enabled = false;\r\n  canvas.addEventListener('mouseenter', () => {\r\n    controls.enabled = true;\r\n  });\r\n  canvas.addEventListener('mouseleave', () => {\r\n    controls.enabled = false;\r\n  });\r\n\r\n  const celestialSphere = new THREE.Object3D();\r\n\r\n  var ground = new THREE.Mesh(\r\n    new THREE.CircleGeometry(EARTH_DISTANCE, 64),\r\n    new THREE.MeshBasicMaterial({\r\n      color: 0xaa0000,\r\n      // color: PALETTE.GROUND,\r\n      transparent: true,\r\n      opacity: 0.6\r\n    })\r\n  );\r\n\r\n  scene.add(ground);\r\n  ground.renderOrder = 1;\r\n  ground.rotation.x = -Math.PI / 2;\r\n\r\n  const underground = ground.clone();\r\n\r\n  underground.material = new THREE.MeshBasicMaterial({\r\n    color: 0xaa0000,\r\n    // color: PALETTE.GROUND,\r\n    blending: THREE.additiveBlending,\r\n    transparent: true,\r\n    opacity: 0.2\r\n  });\r\n\r\n  underground.rotation.x = Math.PI / 2;\r\n  underground.renderOrder = 1;\r\n  scene.add(underground);\r\n\r\n  var sunMap = new THREE.TextureLoader().load(images['sun.png']);\r\n  var sunMaterial = new THREE.SpriteMaterial({\r\n    map: sunMap,\r\n    depthWrite: false\r\n  });\r\n  var sun = new THREE.Sprite(sunMaterial);\r\n  sun.scale.set(SUN_RADIUS * 2, SUN_RADIUS * 2, 1);\r\n  celestialSphere.add(sun);\r\n\r\n  var eclipticPlane = new THREE.Mesh(\r\n    new THREE.TorusGeometry(EARTH_DISTANCE, 0.1, 16, 100),\r\n    new THREE.MeshBasicMaterial({\r\n      color: PALETTE.ECLIPTIC,\r\n      side: THREE.DoubleSide\r\n    })\r\n  );\r\n\r\n  eclipticPlane.rotation.x = Math.PI / 2;\r\n  // celestialSphere.add(mesh);\r\n\r\n  var moon = new THREE.Mesh(\r\n    new THREE.SphereGeometry(MOON_RADIUS * 2, 30, 30),\r\n    WorldMaterial(images['moon-day.jpg'], images['moon-night.jpg'])\r\n  );\r\n\r\n  var moonOrbit = new THREE.Mesh(\r\n    new THREE.TorusGeometry(EARTH_DISTANCE, 0.1, 16, 100),\r\n    new THREE.MeshBasicMaterial({\r\n      color: PALETTE.MOON\r\n      // side: THREE.DoubleSide\r\n    })\r\n  );\r\n  moonOrbit.rotation.x = Math.PI / 2;\r\n\r\n  const moonTilt = new THREE.Object3D();\r\n  moonTilt.add(moon);\r\n  moonTilt.add(moonOrbit);\r\n\r\n  moonTilt.rotateOnWorldAxis(new THREE.Vector3(1, 0, 1).normalize(), 5.1 * DEG);\r\n\r\n  eclipticPlane.rotation.x = Math.PI / 2;\r\n\r\n  const ecliptic = new THREE.Object3D();\r\n  ecliptic.add(sun);\r\n  ecliptic.add(moonTilt);\r\n  ecliptic.add(eclipticPlane);\r\n  ecliptic.rotateOnWorldAxis(new THREE.Vector3(0, 0, 1), -EARTH_TILT * DEG);\r\n  celestialSphere.add(ecliptic);\r\n\r\n  var light = new THREE.DirectionalLight(0xffffff, 1);\r\n  var targetObject = new THREE.Object3D();\r\n  targetObject.position.set(0, 0, 0);\r\n  celestialSphere.add(targetObject);\r\n\r\n  light.target = sun;\r\n  light.position.set(0, 0, 0);\r\n  celestialSphere.add(light);\r\n\r\n  const graticule = makeGraticule(EARTH_DISTANCE);\r\n  celestialSphere.add(graticule);\r\n\r\n  const constellations = makeConstellationLines(EARTH_DISTANCE);\r\n  celestialSphere.add(constellations);\r\n\r\n  var equator = new THREE.Mesh(\r\n    new THREE.TorusGeometry(EARTH_DISTANCE, 0.2, 16, 100),\r\n    new THREE.MeshBasicMaterial({\r\n      color: PALETTE.EQUATOR,\r\n      side: THREE.DoubleSide,\r\n      transparent: true,\r\n      opacity: 0.9\r\n    })\r\n  );\r\n  equator.rotation.x = Math.PI / 2;\r\n  celestialSphere.add(equator);\r\n\r\n  scene.add(celestialSphere);\r\n\r\n  const horizon = makeHorizon(EARTH_DISTANCE);\r\n  scene.add(horizon);\r\n\r\n  const northSouth = new THREE.Mesh(\r\n    new THREE.CylinderGeometry(0.1, 0.1, EARTH_DISTANCE * 2, 8),\r\n    new THREE.MeshBasicMaterial({ color: PALETTE.HORIZON })\r\n  );\r\n\r\n  northSouth.rotation.x = Math.PI / 2;\r\n\r\n  scene.add(northSouth);\r\n\r\n  const eastWest = new THREE.Mesh(\r\n    new THREE.CylinderGeometry(0.1, 0.1, EARTH_DISTANCE * 2, 8),\r\n    new THREE.MeshBasicMaterial({ color: PALETTE.HORIZON })\r\n  );\r\n\r\n  eastWest.rotation.z = Math.PI / 2;\r\n\r\n  scene.add(eastWest);\r\n\r\n  const height = 10;\r\n\r\n  const observer = new THREE.Mesh(\r\n    new THREE.CylinderGeometry(0.5, 0.5, height, 8),\r\n    new THREE.MeshBasicMaterial({ color: PALETTE.HORIZON })\r\n  );\r\n\r\n  observer.position.set(0, height / 2, 0);\r\n\r\n  scene.add(observer);\r\n\r\n  const starFieldOptions = {\r\n    maxSize: 1,\r\n    dot: true,\r\n    additive: true,\r\n    scalePoint: mag => 3 * Math.exp(-0.2 * mag)\r\n  };\r\n\r\n  let starField = makeStarField(EARTH_DISTANCE, starFieldOptions);\r\n  celestialSphere.add(starField);\r\n\r\n  getStars11().then(stars11 => {\r\n    starField = makeStarField(EARTH_DISTANCE, {\r\n      ...starFieldOptions,\r\n      stars: stars11\r\n    });\r\n    celestialSphere.add(starField);\r\n  });\r\n\r\n  const planets = {};\r\n\r\n  ['Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn'].forEach(p => {\r\n    const _p = new THREE.Mesh(\r\n      new THREE.SphereGeometry(MOON_RADIUS * 0.3, 32, 32),\r\n      new THREE.MeshBasicMaterial({ color: PALETTE[p] })\r\n    );\r\n    // _p.scale.set(SUN_RADIUS * 0.5, SUN_RADIUS * 0.5, 1);\r\n    ecliptic.add(_p);\r\n\r\n    planets[p] = _p;\r\n  });\r\n\r\n  return {\r\n    update({ positions, hide, location }) {\r\n      const sunLong = positions.Sun.longitude * DEG + Math.PI;\r\n      const moonLong = positions.Moon.longitude * DEG + Math.PI;\r\n\r\n      ['Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn'].forEach(p => {\r\n        const _long = positions[p].longitude * DEG + Math.PI;\r\n        const _lat = positions[p].latitude * DEG;\r\n        planets[p].position.x =\r\n          EARTH_DISTANCE * Math.sin(_long) * Math.cos(_lat);\r\n        planets[p].position.z = EARTH_DISTANCE * Math.cos(_long);\r\n        planets[p].position.y =\r\n          EARTH_DISTANCE * Math.sin(_long) * Math.sin(_lat);\r\n\r\n        const scale = Math.min(2, positions[p].apparentSize * 1e4)/2 + 0.5;\r\n        planets[p].scale.set(scale, scale, scale);\r\n      });\r\n\r\n      constellations.visible = !hide.constellations;\r\n      moonOrbit.visible = !hide.orbits;\r\n      eclipticPlane.visible = !hide.orbits;\r\n      graticule.visible = !hide.equator;\r\n      equator.visible = !hide.equator;\r\n      horizon.visible = !hide.horizon;\r\n\r\n      sun.position.x = EARTH_DISTANCE * Math.sin(sunLong);\r\n      sun.position.z = EARTH_DISTANCE * Math.cos(sunLong);\r\n\r\n      celestialSphere.rotation.x = (90 - location.lat) * DEG;\r\n      celestialSphere.rotation.y =\r\n        -location.long * DEG - positions.Earth.rotationAngle * DEG;\r\n\r\n      moon.position.x = EARTH_DISTANCE * Math.sin(moonLong);\r\n      moon.position.z = EARTH_DISTANCE * Math.cos(moonLong);\r\n      moon.lookAt(ground.position);\r\n      moon.rotateY(-Math.PI / 2);\r\n\r\n      renderer.render(scene, camera);\r\n      controls.update();\r\n    },\r\n\r\n    onResize() {\r\n      const BCR1 = container.getBoundingClientRect();\r\n      const WIDTH = BCR1.width;\r\n      const HEIGHT = BCR1.height;\r\n\r\n      camera.aspect = WIDTH / HEIGHT;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(WIDTH, HEIGHT);\r\n    }\r\n  };\r\n}\r\n"]}