{"version":3,"sources":["js/three/starField.js"],"names":["starsCSV","stars","trim","split","slice","map","line","vertexShader","getFragmentShader","dot","clamp","x","a","b","Math","max","min","makeStarField","radius","options","minSize","scalePoint","mag","exp","fadePoint","shaderMaterial","THREE","ShaderMaterial","uniforms","fragmentShader","transparent","vertexColors","geometry","BufferGeometry","positions","normals","colors","alphas","sizes","i","len","length","bv","long","lat","lambda","PI","phi","cosPhi","cos","z","sin","y","bv_to_rgb","r","g","push","normal","Vector3","normalize","addAttribute","Float32BufferAttribute","console","log","Points","t","pow","Y","X","Z"],"mappings":"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","file":"starField.07a7fabd.js","sourceRoot":"..","sourcesContent":["import fs from 'fs';\r\nimport * as THREE from 'three';\r\n\r\nconst starsCSV = fs.readFileSync('./js/astro/stars14.csv', 'utf8');\r\n\r\nconst stars = starsCSV\r\n  .trim()\r\n  .split('\\n')\r\n  // remove header\r\n  .slice(1)\r\n  .map(line => line.split(','));\r\n\r\nconst vertexShader = `\r\n  attribute float alpha;\r\n  varying float vAlpha;\r\n  attribute float size;\r\n  varying float vSize;\r\n  attribute vec3 vertexnormal;\r\n  varying vec3 vNormal;\r\n  varying vec3 vColor;\r\n  varying vec3 vPos;\r\n  varying vec3 cameraVector;\r\n  varying vec3 vCameraPos;  \r\n  varying float fDot;\r\n  // uniform vec3 Z = vec3( 0.0, 0.0, 1.0 );\r\n\r\n  void main() {\r\n    vColor = color;\r\n    vAlpha = alpha;\r\n    vSize = size;\r\n    vNormal = vertexnormal;\r\n    vCameraPos = cameraPosition;\r\n    cameraVector = cameraPosition - vPos;\r\n    vPos = (modelViewMatrix * vec4(position, 1.0)).xyz;\r\n    vNormal = normalize(modelViewMatrix * vec4(vertexnormal, 0.0)).xyz;\r\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n    fDot = dot(vNormal, vec3( 0.0, 0.0, 1.0 ));\r\n    // gl_PointSize = 2.0;\r\n    gl_PointSize = vSize;\r\n    // gl_Position = projectionMatrix * mvPosition;\r\n\r\n    \r\n    if ( fDot > 0.0 )\r\n      gl_Position = vec4(2.0, 0.0, 0.0, 1.0);\r\n    else\r\n      gl_Position = projectionMatrix * mvPosition;\r\n  }\r\n`;\r\n\r\nconst getFragmentShader = ({ dot }) =>\r\n  !dot\r\n    ? `\r\n      varying vec3 vColor;\r\n      varying float vAlpha;\r\n      void main() {\r\n        gl_FragColor = vec4( vColor, vAlpha );\r\n      }\r\n    `\r\n    : `\r\n      varying vec3 vColor;\r\n      // varying vec3 vPos;\r\n      varying float vAlpha;\r\n      // varying vec3 vNormal;\r\n      // varying vec3 cameraVector;\r\n      // varying vec3 vCameraPos;\r\n      varying float fDot;\r\n      \r\n      void main() {\r\n        gl_FragColor = vec4( vColor, 0.1 + 0.9 * vAlpha * - clamp(fDot, -1.0, 0.0) );\r\n      }\r\n    `;\r\n\r\nconst clamp = (x, a, b) => Math.max(a, Math.min(x, b));\r\n\r\nexport default function makeStarField(radius, options = {}) {\r\n  const minSize = options.minSize || 0.5;\r\n  const scalePoint = options.scalePoint || (mag => 5 * Math.exp(-0.2 * mag));\r\n  const fadePoint = options.scalePoint || (mag => Math.exp(-0.2 * (mag - 4)));\r\n  const dot = options.dot || false;\r\n\r\n  const shaderMaterial = new THREE.ShaderMaterial({\r\n    uniforms: {\r\n      dot\r\n    },\r\n    vertexShader,\r\n    fragmentShader: getFragmentShader({ dot }),\r\n    // blending: options.additive ? THREE.AdditiveBlending : THREE.NormalBlending,\r\n    // depthTest: false,\r\n    transparent: true,\r\n    vertexColors: true\r\n  });\r\n\r\n  const geometry = new THREE.BufferGeometry();\r\n  const positions = [];\r\n  const normals = [];\r\n  const colors = [];\r\n  const alphas = [];\r\n  const sizes = [];\r\n\r\n  for (let i = 0, len = stars.length; i < len; i++) {\r\n    const [mag, bv, long, lat] = stars[i];\r\n\r\n    const lambda = -(long * Math.PI) / 180;\r\n    const phi = (lat * Math.PI) / 180;\r\n    const cosPhi = Math.cos(phi);\r\n\r\n    const x = radius * cosPhi * Math.cos(lambda);\r\n    const z = radius * cosPhi * Math.sin(lambda);\r\n    const y = radius * Math.sin(phi);\r\n\r\n    const [r, g, b] = bv_to_rgb(bv);\r\n\r\n    if (x > -radius * 1.1 && y > -radius * 1.1 && z > -radius * 1.1) {\r\n      positions.push(x);\r\n      positions.push(y);\r\n      positions.push(z);\r\n\r\n      const normal = new THREE.Vector3(x, y, z).normalize();\r\n\r\n      normals.push(normal.x);\r\n      normals.push(normal.y);\r\n      normals.push(normal.z);\r\n\r\n      colors.push(r);\r\n      colors.push(g);\r\n      colors.push(b);\r\n\r\n      sizes.push(Math.max(scalePoint(mag), minSize));\r\n      alphas.push(clamp(fadePoint(mag), 0, 1));\r\n      // alphas.push((14 - mag) / 14);\r\n    }\r\n  }\r\n\r\n  geometry.addAttribute(\r\n    'position',\r\n    new THREE.Float32BufferAttribute(positions, 3)\r\n  );\r\n\r\n  geometry.addAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n  geometry.addAttribute(\r\n    'vertexnormal',\r\n    new THREE.Float32BufferAttribute(normals, 3)\r\n  );\r\n  geometry.addAttribute('alpha', new THREE.Float32BufferAttribute(alphas, 1));\r\n  geometry.addAttribute('size', new THREE.Float32BufferAttribute(sizes, 1));\r\n\r\n  console.log(geometry);\r\n\r\n  return new THREE.Points(geometry, shaderMaterial);\r\n}\r\n\r\nfunction bv_to_rgb(bv) {\r\n  var t = 4600 * (1 / (0.92 * bv + 1.7) + 1 / (0.92 * bv + 0.62));\r\n\r\n  // t to xyY\r\n  var x,\r\n    y = 0;\r\n\r\n  if ((t >= 1667) & (t <= 4000)) {\r\n    x =\r\n      (-0.2661239 * Math.pow(10, 9)) / Math.pow(t, 3) +\r\n      (-0.234358 * Math.pow(10, 6)) / Math.pow(t, 2) +\r\n      (0.8776956 * Math.pow(10, 3)) / t +\r\n      0.17991;\r\n  } else if ((t > 4000) & (t <= 25000)) {\r\n    x =\r\n      (-3.0258469 * Math.pow(10, 9)) / Math.pow(t, 3) +\r\n      (2.1070379 * Math.pow(10, 6)) / Math.pow(t, 2) +\r\n      (0.2226347 * Math.pow(10, 3)) / t +\r\n      0.24039;\r\n  }\r\n\r\n  if ((t >= 1667) & (t <= 2222)) {\r\n    y =\r\n      -1.1063814 * Math.pow(x, 3) -\r\n      1.3481102 * Math.pow(x, 2) +\r\n      2.18555832 * x -\r\n      0.20219683;\r\n  } else if ((t > 2222) & (t <= 4000)) {\r\n    y =\r\n      -0.9549476 * Math.pow(x, 3) -\r\n      1.37418593 * Math.pow(x, 2) +\r\n      2.09137015 * x -\r\n      0.16748867;\r\n  } else if ((t > 4000) & (t <= 25000)) {\r\n    y =\r\n      3.081758 * Math.pow(x, 3) -\r\n      5.8733867 * Math.pow(x, 2) +\r\n      3.75112997 * x -\r\n      0.37001483;\r\n  }\r\n\r\n  // xyY to XYZ, Y = 1\r\n  var Y = 1.0;\r\n  var X = y == 0 ? 0 : (x * Y) / y;\r\n  var Z = y == 0 ? 0 : ((1 - x - y) * Y) / y;\r\n\r\n  //XYZ to rgb\r\n  /*var r = 0.41847 * X - 0.15866 * Y - 0.082835 * Z\r\n  var g = -0.091169 * X + 0.25243 * Y + 0.015708 * Z\r\n  var b = 0.00092090 * X - 0.0025498 * Y + 0.17860 * Z*/\r\n\r\n  //XYZ to rgb\r\n  var r = 3.2406 * X - 1.5372 * Y - 0.4986 * Z;\r\n  var g = -0.9689 * X + 1.8758 * Y + 0.0415 * Z;\r\n  var b = 0.0557 * X - 0.204 * Y + 1.057 * Z;\r\n\r\n  //linear RGB to sRGB\r\n  var R = r <= 0.0031308 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - 0.055;\r\n  var G = g <= 0.0031308 ? 12.92 * g : 1.055 * Math.pow(g, 1 / 2.4) - 0.055;\r\n  var B = b <= 0.0031308 ? 12.92 * b : 1.055 * Math.pow(b, 1 / 2.4) - 0.055;\r\n\r\n  return [R, G, B];\r\n}\r\n\r\nexport { makeStarField };\r\n"]}