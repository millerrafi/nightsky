import { getPositions } from '../js/astronomy.js';
import './toBeCyclicallyCloseTo.js';

/**
 * Astronomy data sources:
 * https://eclipse.gsfc.nasa.gov/LEcat5/LE2001-2100.html
 * https://eclipse.gsfc.nasa.gov/SEcat5/SE2001-2100.html
 */

describe('validation', () => {
  test('throws if there is no date', () => {
    expect(() => getPositions()).toThrow('no date');
  });
});

describe('Moon', () => {
  describe('at total lunar eclipse', () => {
    test.each`
      date            | time
      ${'2001-01-09'} | ${'20:21:40'}
      ${'2003-05-16'} | ${'03:41:13'}
      ${'2003-11-09'} | ${'01:19:38'}
      ${'2004-05-04'} | ${'20:31:17'}
      ${'2004-10-28'} | ${'03:05:11'}
      ${'2007-03-03'} | ${'23:21:59'}
      ${'2007-08-28'} | ${'10:38:27'}
      ${'2008-02-21'} | ${'03:27:09'}
      ${'2010-12-21'} | ${'08:18:04'}
      ${'2011-06-15'} | ${'20:13:43'}
      ${'2011-12-10'} | ${'14:32:56'}
      ${'2014-04-15'} | ${'07:46:48'}
      ${'2014-10-08'} | ${'10:55:44'}
      ${'2015-04-04'} | ${'12:01:30'}
      ${'2015-09-28'} | ${'02:48:17'}
      ${'2018-01-31'} | ${'13:31:00'}
      ${'2018-07-27'} | ${'20:22:54'}
      ${'2019-01-21'} | ${'05:13:27'}
      ${'2021-05-26'} | ${'11:19:53'}
      ${'2022-05-16'} | ${'04:12:42'}
    `('on $date', ({ date, time }) => {
      const { Sun, Moon } = getPositions(new Date(`${date}Z${time}`), {
        bodies: ['Sun', 'Moon']
      });

      expect(Moon.latitude).toBeCyclicallyCloseTo(0, { precision: 0 });
      expect(Moon.longitude).toBeCyclicallyCloseTo(Sun.longitude + 180, {
        precision: 1
      });
    });
  });

  describe('at total solar eclipse', () => {
    test.each`
      date            | time
      ${'2001-06-21'} | ${'12:04:46'}
      ${'2001-12-14'} | ${'20:53:01'}
      ${'2002-06-10'} | ${'23:45:22'}
      ${'2002-12-04'} | ${'07:32:16'}
      ${'2003-11-23'} | ${'22:50:22'}
      ${'2005-10-03'} | ${'10:32:47'}
      ${'2006-03-29'} | ${'10:12:23'}
      ${'2006-09-22'} | ${'11:41:16'}
      ${'2008-02-07'} | ${'03:56:10'}
      ${'2008-08-01'} | ${'10:22:12'}
      ${'2009-01-26'} | ${'07:59:45'}
      ${'2009-07-22'} | ${'02:36:25'}
      ${'2010-01-15'} | ${'07:07:39'}
      ${'2010-07-11'} | ${'19:34:38'}
      ${'2012-05-20'} | ${'23:53:54'}
      ${'2012-11-13'} | ${'22:12:55'}
      ${'2013-05-10'} | ${'00:26:20'}
      ${'2015-03-20'} | ${'09:46:47'}
      ${'2016-03-09'} | ${'01:58:19'}
      ${'2016-09-01'} | ${'09:08:02'}
      ${'2017-02-26'} | ${'14:54:33'}
      ${'2017-08-21'} | ${'18:26:40'}
      ${'2019-07-02'} | ${'19:24:07'}
      ${'2019-12-26'} | ${'05:18:53'}
      ${'2020-12-14'} | ${'16:14:39'}
      ${'2021-06-10'} | ${'10:43:07'}
      ${'2021-12-04'} | ${'07:34:38'}
      ${'2023-10-14'} | ${'18:00:41'}
    `('on $date', ({ date, time }) => {
      const d = new Date(`${date}Z${time}`);
      const { Sun, Moon } = getPositions(new Date(`${date}Z${time}`), {
        bodies: ['Sun', 'Moon']
      });
      expect(Moon.longitude).toBeCyclicallyCloseTo(Sun.longitude, {
        precision: 0
      });
    });
  });
});

describe('Sun longitude', () => {
  describe('is 0° at March equinox', () => {
    test.each`
      date            | time       | expected
      ${'2014-03-20'} | ${'16:57'} | ${0}
      ${'2015-03-20'} | ${'22:45'} | ${0}
      ${'2016-03-20'} | ${'04:30'} | ${0}
      ${'2017-03-20'} | ${'10:28'} | ${0}
      ${'2018-03-20'} | ${'16:15'} | ${0}
      ${'2019-03-20'} | ${'21:58'} | ${0}
      ${'2020-03-20'} | ${'03:50'} | ${0}
      ${'2021-03-20'} | ${'09:37'} | ${0}
      ${'2022-03-20'} | ${'15:33'} | ${0}
      ${'2023-03-20'} | ${'21:24'} | ${0}
      ${'2024-03-20'} | ${'03:07'} | ${0}
    `('on $date', ({ date, time, expected }) => {
      const { Sun } = getPositions(new Date(`${date}Z${time}`), {
        bodies: ['Sun']
      });

      expect(Sun.longitude).toBeCyclicallyCloseTo(expected, { precision: 1 });
    });
  });

  describe('is 180° at September equinox', () => {
    test.each`
      date            | time       | expected
      ${'2014-09-23'} | ${'02:29'} | ${180}
      ${'2015-09-23'} | ${'08:21'} | ${180}
      ${'2016-09-22'} | ${'14:21'} | ${180}
      ${'2017-09-22'} | ${'20:02'} | ${180}
      ${'2018-09-23'} | ${'01:54'} | ${180}
      ${'2019-09-23'} | ${'07:50'} | ${180}
      ${'2020-09-22'} | ${'13:31'} | ${180}
      ${'2021-09-22'} | ${'19:21'} | ${180}
      ${'2022-09-23'} | ${'01:04'} | ${180}
      ${'2023-09-23'} | ${'06:50'} | ${180}
      ${'2024-09-22'} | ${'12:44'} | ${180}
    `('on $date', ({ date, time, expected }) => {
      const { Sun } = getPositions(new Date(`${date}Z${time}`), {
        bodies: ['Sun']
      });

      expect(Sun.longitude).toBeCyclicallyCloseTo(expected, { precision: 1 });
    });
  });
});
